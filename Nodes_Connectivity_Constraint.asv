function [c,ceq] = Nodes_Connectivity_Constraint(z)
global Ctrl_No mini Node_i Node_i_child
c = []; ceq = [];

%% Optimization variables unzip: delta_t, StateNdot_tot, Ctrl_tot, ContactForce_tot
delta_t = z(1)/Ctrl_No;    
stateNdot_ref = z(2:end);
StateNdot_tot = stateNdot_ref(1:13*2*Ctrl_No,:);
Ctrl_tot = stateNdot_ref(length(StateNdot_tot)+1:length(StateNdot_tot)+ Ctrl_No * 10,:);
ContactForce_tot = z(1+length(Ctrl_tot) + length(StateNdot_tot) + 1:end,:);
ContactForce_tot = reshape(ContactForce_tot, 12, Ctrl_No);
StateNdot_tot = reshape(StateNdot_tot, 26, Ctrl_No);
Ctrl_tot = reshape(Ctrl_tot, 10, Ctrl_No);

sigma_i = Node_i.mode;
sigma_i_child = Node_i_child.mode;
sigma_i_change = sigma_i_child - sigma_i;
if max(sigma_i_change)==1
    % In this case, it is making contact
    sigma_tran = sigma_i;
    sigma_goal = sigma_i_child;
else
    % In this case, it is retracting contact
    sigma_tran = sigma_i_child;
    sigma_goal = sigma_i_child;    
end

sigma_base = [sigma_i' sigma_tran' sigma_goal'];

%% 1. Initial condition satisfaction constraint

stateNdot_vec = zeros(Ctrl_No,1);

for i = 1:Ctrl_No
    stateNdot_vec_temp = stateNdot_vec;    stateNdot_vec_temp(i) = 1;
    stateNdot_i = StateNdot_tot * stateNdot_vec_temp;      Ctrl_i = Ctrl_tot(:,i);                lamda_i = ContactForce_tot(:,i);   
    rIx_i = stateNdot_i(1);                rIy_i = stateNdot_i(2);                theta_i = stateNdot_i(3);
    q1_i = stateNdot_i(4);                 q2_i = stateNdot_i(5);                 q3_i = stateNdot_i(6);
    q4_i = stateNdot_i(7);                 q5_i = stateNdot_i(8);                 q6_i = stateNdot_i(9);
    q7_i = stateNdot_i(10);                q8_i = stateNdot_i(11);                q9_i = stateNdot_i(12);
    q10_i = stateNdot_i(13);
    
    rIxdot_i = stateNdot_i(1+13);          rIydot_i = stateNdot_i(2+13);          thetadot_i = stateNdot_i(3+13);
    q1dot_i = stateNdot_i(4+13);           q2dot_i = stateNdot_i(5+13);           q3dot_i = stateNdot_i(6+13);
    q4dot_i = stateNdot_i(7+13);           q5dot_i = stateNdot_i(8+13);           q6dot_i = stateNdot_i(9+13);
    q7dot_i = stateNdot_i(10+13);          q8dot_i = stateNdot_i(11+13);          q9dot_i = stateNdot_i(12+13);
    q10dot_i = stateNdot_i(13+13);
    
    if i == 1
        ceq = [ceq; stateNdot_i - Node_i.robotstate];
    end
    
    xstate_i = stateNdot_i(1:13,:);
    xstatedot_i = stateNdot_i(14:26,:);  
    if i == Ctrl_No
        x_statep1 = xstate_i;
    else
        x_statep1 = StateNdot_tot(1:13,i+1);
    end
    
    qddot = (x_statep1 - xstate_i - xstatedot_i * delta_t)/(1/2 * delta_t^2) ; 
    D_q = D_q_fn(q1_i,q2_i,q3_i,q4_i,q5_i,q6_i,q7_i,q8_i,q9_i,q10_i,theta_i);
    B_q = B_q_fn(1);
    C_q_qdot = C_q_qdot_fn(q1_i,q2_i,q3_i,q4_i,q5_i,q6_i,q7_i,q8_i,q9_i,q10_i,...
                           q10dot_i,q1dot_i,q2dot_i,q3dot_i,q4dot_i,q5dot_i,q6dot_i,q7dot_i,q8dot_i,q9dot_i,thetadot_i,theta_i);    
    Jac_Full = Jac_Full_fn(q1_i,q2_i,q3_i,q4_i,q5_i,q6_i,q7_i,q8_i,q9_i,q10_i,theta_i);
    
    %% 2. Dynamics constraints
    Dyn_Via = D_q * qddot + C_q_qdot - Jac_Full' * lamda_i - B_q * Ctrl_i;
    ceq = [ceq; Dyn_Via];
    
    %% 3. Complementarity constraints: Distance!!!---Node_i_child mode constraints
    
%     rA = rA_fn(q1_i,q2_i,q3_i,rIx_i,rIy_i,theta_i);
%     rB = rB_fn(q1_i,q2_i,q3_i,rIx_i,rIy_i,theta_i);
%     rC = rC_fn(q4_i,q5_i,q6_i,rIx_i,rIy_i,theta_i);
%     rD = rD_fn(q4_i,q5_i,q6_i,rIx_i,rIy_i,theta_i);
%     rE = rE_fn(q7_i,q8_i,rIx_i,rIy_i,theta_i);
%     rF = rF_fn(q9_i,q10_i,rIx_i,rIy_i,theta_i);
%     rT = rT_fn(rIx_i,rIy_i,theta_i);
%     rCOM = rCOM_fn(q1_i,q2_i,q3_i,q4_i,q5_i,q6_i,q7_i,q8_i,q9_i,q10_i,rIx_i,rIy_i,theta_i);
%     
%     vA = vA_fn(q1_i,q2_i,q3_i,q1dot_i,q2dot_i,q3dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vB = vB_fn(q1_i,q2_i,q3_i,q1dot_i,q2dot_i,q3dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vC = vC_fn(q4_i,q5_i,q6_i,q4dot_i,q5dot_i,q6dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vD = vD_fn(q4_i,q5_i,q6_i,q4dot_i,q5dot_i,q6dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vE = vE_fn(q7_i,q8_i,q7dot_i,q8dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vF = vF_fn(q9_i,q10_i,q10dot_i,q9dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vT = vT_fn(rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     vCOM = vCOM_fn(q1_i,q2_i,q3_i,q4_i,q5_i,q6_i,q7_i,q8_i,q9_i,q10_i,...
%                    q10dot_i,q1dot_i,q2dot_i,q3dot_i,q4dot_i,q5dot_i,...
%                    q6dot_i,q7dot_i,q8dot_i,q9dot_i,rIxdot_i,rIydot_i,thetadot_i,theta_i);
%     
%     End_Pos = [rA'; rB'; rC'; rD'; rE'; rF'; rT'; rCOM'];
%     End_Vel = [vA'; vB'; vC'; vD'; vE'; vF'; vT'; vCOM'];
%     Node_i_child_Pos = End_Pos;
%     Node_i_child_Vel = End_Vel;
    
    [Node_i_child_Pos, Node_i_child_Vel] = End_Effector_Pos_Vel(rIx rIy theta q1 q2 q3 q4 q5 q6 q7 q8 q9 q10);
    [Node_i_child_Pos_Dist, Node_i_child_Pos_Ind]= Obs_Dist_Fn(Node_i_child_Pos);
    Node_i_child_Vel = reshape(Node_i_child_Vel',16,1);
    
    sigma_vec_sel = [0 1 0]';
    
    if i == 1
       sigma_vec_sel = [ 1 0 0]';       
    end
    
    if i == Ctrl_No
        sigma_vec_sel = [ 0 0 1]';
    end
    
    sigma_t = sigma_base * sigma_vec_sel;
   
    Eqn_Pos_Matrix = blkdiag(sigma_t(1),sigma_t(1), sigma_t(2),sigma_t(2),sigma_t(3),sigma_t(4), 0, 0);
    Eqn_Vel_Matrix = blkdiag(sigma_t(1),sigma_t(1),sigma_t(1),sigma_t(1),sigma_t(2),sigma_t(2),sigma_t(2),sigma_t(2),...
                             sigma_t(3),sigma_t(3),sigma_t(4),sigma_t(4), 0, 0, 0, 0);
    ceq = [ceq; Eqn_Pos_Matrix * Node_i_child_Pos_Dist];
    ceq = [ceq; Eqn_Vel_Matrix * Node_i_child_Vel];
    
    Inq_Pos_Matrix = blkdiag(not(sigma_t(1)),not(sigma_t(1)), not(sigma_t(2)),not(sigma_t(2)),not(sigma_t(3)),not(sigma_t(4)), 0, 0);
    
    c = [c; - (Inq_Pos_Matrix * Node_i_child_Pos_Dist - Inq_Pos_Matrix * ones(8,1) * mini)];
    
    %% 4. Complementarity constraints: Contact Force!!!
    Envi_Map = Envi_Map_Defi(1);
    Edges_Normal_Angle = Polyline_Normal_fn(Envi_Map);
    Eqn_CF_Matrix = blkdiag(not(sigma_t(1)),not(sigma_t(1)), not(sigma_t(1)),not(sigma_t(1)),...
                            not(sigma_t(2)),not(sigma_t(2)), not(sigma_t(2)),not(sigma_t(2)),...
                            not(sigma_t(3)),not(sigma_t(3)), not(sigma_t(4)),not(sigma_t(4)));
    ceq = [ceq; Eqn_CF_Matrix * lamda_i];    
    Normal_Force = Normal_Force_Cal_fn(Edges_Normal_Angle, Node_i_child_Pos_Ind, lamda_i);
    c = [c; -Normal_Force];
    
    %% 5. Contact Constraint Maintenance: the previous contacts have to be maintained
    Node_i_State = Node_i.robotstate;
    [Node_i_Pos, Node_i_Vel]= End_Effector_Pos_Vel(Node_i_State);
    Eqn_Maint_Matrix = blkdiag(sigma_i(1) * sigma_i_child(1), sigma_i(1) * sigma_i_child(1),...
                               sigma_i(1) * sigma_i_child(1), sigma_i(1) * sigma_i_child(1),...
                               sigma_i(2) * sigma_i_child(2), sigma_i(2) * sigma_i_child(2),...
                               sigma_i(2) * sigma_i_child(2), sigma_i(2) * sigma_i_child(2),...
                               sigma_i(3) * sigma_i_child(3), sigma_i(3) * sigma_i_child(3),...
                               sigma_i(4) * sigma_i_child(4), sigma_i(4) * sigma_i_child(4),0,0,0,0);
    
    Node_i_Pos = reshape(Node_i_Pos',16,1);
    Node_i_child_Pos = reshape(Node_i_child_Pos',16,1);
    Node_i_Vel = reshape(Node_i_Vel',16,1);
    ceq = [ceq; Eqn_Maint_Matrix * (Node_i_Pos - Node_i_child_Pos)];
    ceq = [ceq; Eqn_Maint_Matrix * (Node_i_Vel - Node_i_child_Vel)];
end

end
